{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyPress","event","key","setState","error","loading","summonerMatchData","fetch","state","summonerName","then","response","json","data","catch","console","handleChange","target","value","findChampion","id","champion","champions","findSpell","spell","spells","findPrimaryRune","styleId","perkId","i","runes","length","rune","keystones","slots","j","keystone","findSubRune","findItem","items","renderMatches","matchData","matches","match","championId","matchDuration","gameDuration","timer","Math","floor","spellList","spell1Id","spell2Id","runeList","primaryPerkStyle","primaryPerk","subPerkStyle","itemList","push","filter","Boolean","map","item","react_default","a","createElement","className","image","full","src","log","gameId","win","name","icon","kills","deaths","assists","kda","champLevel","creepscore","creepscorepermin","renderError","renderLoading","type","autoFocus","onKeyPress","onChange","placeholder","Component","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9994f164.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport runes from './lol_data/runesReforged.json';\nimport spells from './lol_data/summoner.json';\nimport items from './lol_data/item.json';\nimport champions from './lol_data/champion.json';\nimport './App.css';\n\nclass App extends Component {\n   constructor() {\n      super();\n\n      this.state = {\n         summonerName: \"\",\n         error: false,\n         loading: false,\n         summonerMatchData: []\n      };\n   }\n\n   handleKeyPress = (event) => {\n      if (event.key === 'Enter') {\n         this.setState({ error: false, loading: true, summonerMatchData: [] });\n         fetch('/summoner?name=' + this.state.summonerName)\n            .then(response => response.json())\n            .then(data => this.setState({ summonerMatchData: data, loading: false }))\n            .catch(error => {\n               console.error(error);\n               this.setState({ error: true, loading: false })\n            });\n      }\n   }\n\n   handleChange = (event) => {\n      this.setState({ summonerName: event.target.value });\n   }\n\n   findChampion = (id) => {\n      for (let champion in champions.data) {\n         if (champions.data[champion].key == id) {\n            return champions.data[champion];\n         } \n      }\n      return null;\n   }\n\n   findSpell = (id) => {\n      for (let spell in spells.data) {\n         if (spells.data[spell].key == id) {\n            return spells.data[spell];\n         }\n      }\n      return null;\n   }\n\n   findPrimaryRune = (styleId, perkId) => {\n      for (let i = 0; i < runes.length; i++) {\n         let rune = runes[i];\n         if (rune.id == styleId) {\n            const keystones = rune.slots[0].runes;\n            for (let j = 0; j < keystones.length; j++) {\n               let keystone = keystones[j];\n               if (keystone.id == perkId) {\n                  return keystone;\n               }\n            }\n         }\n      }\n      return null;\n   }\n\n   findSubRune = (styleId) => {\n      for (let i = 0; i < runes.length; i++) {\n         let rune = runes[i];\n         if (rune.id == styleId) {\n            return rune;\n         }\n      }\n      return null;\n   }\n\n   findItem = (id) => {\n      return items.data[id];\n   }\n\n   renderMatches = () => {\n      let matchData = this.state.summonerMatchData;\n      let matches = [];\n\n      for (let i = 0; i < matchData.length; i++) {\n         const match = matchData[i];\n         const champion = this.findChampion(match.championId);\n         const matchDuration = match.gameDuration;\n         const timer = Math.floor(matchDuration / 60) + \":\" + ((matchDuration % 60 < 10) ? '0' + (matchDuration % 60) : matchDuration % 60);\n         const spellList = [this.findSpell(match.spell1Id), this.findSpell(match.spell2Id)];\n         const runeList = [this.findPrimaryRune(match.primaryPerkStyle, match.primaryPerk), this.findSubRune(match.subPerkStyle)];\n         \n         let itemList = [];\n         for (let j = 0; j < 7; j++) {\n            itemList.push(this.findItem(match['item' + j]));\n         }\n         itemList = itemList.filter(Boolean).map(item => <img className='sprite' key={item.image.full} src={'/img/item/' + item.image.full} />);\n         console.log(champion);\n         matches.push(\n            <div key={match.gameId} className={match.win ? \"match victory\" : \"match defeat\"}>\n               <div className='matchStats container'>\n                  <p className='victoryStatus'>{match.win ? \"Victory\" : \"Defeat\"}</p>\n                  <p className='gameTimer'>{timer}</p>\n               </div>\n               <div className='champion container'>\n                  <img src={'/img/champion/' + champion.image.full} className='championSprite' />\n                  <p className='centerText'>{champion.name}</p>\n               </div>\n               <div className='spells container'>\n                  <div className='spells'>\n                     <img src={'/img/spell/' + spellList[0].image.full} className='sprite'/>\n                     <img src={'/img/spell/' + spellList[1].image.full} className='sprite'/>\n                  </div>\n                  <div className='runes'>\n                     <img src={'/img/' + runeList[0].icon} className='sprite'/>\n                     <img src={'/img/' + runeList[1].icon} className='sprite'/>\n                  </div>\n               </div>\n               <div className='performance container'>\n                  <p className='boldText'>{match.kills + ' / ' + match.deaths + ' / ' + match.assists}</p>\n                  <p className='smallText'>{match.kda + ' KDA'}</p>\n               </div>\n               <div className='score container'>\n                  <p className='smallText'>{'Level ' + match.champLevel}</p>\n                  <p className='smallText'>{match.creepscore + ' cs'}</p>\n                  <p className='smallText'>{match.creepscorepermin + ' cs/m'}</p>\n               </div>\n               <div className='items container'>\n                  {itemList}\n               </div>\n            </div>\n         );\n      }\n\n      return (\n         <div className='matchlist'>{matches}</div>\n      );\n   }\n\n   renderError = () => {\n      return (\n         <div className='errormsg'>{this.state.error ? \"Error: Invalid summoner name\" : \"\"}</div>\n      );\n   }\n\n   renderLoading = () => {\n      return (\n         <div className={this.state.loading ? 'loader' : 'loaded'}></div>\n      );\n   }\n\n   render() {\n      return (\n         <div className=\"App\">\n            <div id=\"AppContainer\">\n               <input type='text' autoFocus='autofocus' onKeyPress={this.handleKeyPress} onChange={this.handleChange} id=\"search\" placeholder='Enter Summoner Name'/>\n               {this.renderError()}\n               {this.renderLoading()}\n               {this.renderMatches()}\n            </div>\n         </div>\n      );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}